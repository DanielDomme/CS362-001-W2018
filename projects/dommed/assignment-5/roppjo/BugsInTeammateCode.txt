Bug Report 1
Bug ID: isValid()-001

Bug Symptom and Cause:  
	When start hour is set to 0, the appointment is considered invalid by isValid().  This appears to be caused by the bounds 
	being changed from 0 for the lower bound to be checked.  One appears to be a valid start hour.  This causes the time of midnight to be
	invalid and subtracts one hour from the normal day.  This symptom appears to be caused by a bug in the isValid() method bounds for valid appointments.

Bug Description:  
	To make the occur, I made a new appointment object with a start hour of 0.  When the method isValid() checks the validity of
	the appointment, it fails because isValids() returns false.
	
	Test Case that causes the error:
	@Test
	  public void test07()  throws Throwable  {
		 int startHour=0;
		 int startMinute=30;
		 int startDay=15;
		 int startMonth=01;
		 int startYear=2018;
		 String title="Birthday Party";
		 String description="This is my birthday party.";
		 //Construct a new Appointment object with the initial data	 
		 Appt appt7 = new Appt(startHour,
		          startMinute ,
		          startDay ,
		          startMonth ,
		          startYear ,
		          title,
		         description);
		String toStringTest3 = appt7.toString();
			
	// assertions
		 assertTrue(appt7.getValid());
		 assertEquals(0, appt7.getStartHour());
		 assertEquals(30, appt7.getStartMinute());
		 assertEquals(15, appt7.getStartDay());
		 assertEquals(01, appt7.getStartMonth());
		 assertEquals(2018, appt7.getStartYear());
		 assertEquals("Birthday Party", appt7.getTitle());
		 assertEquals("This is my birthday party.", appt7.getDescription()); 
		 
	 }
	 
Software Version:
	JDK:  jdk1.8.0_151
	Windows: Windows 10 Pro
	Maven: 4.0.0
	JUnit: 4.12
	jacoco: 0.8.0
	
Bug Severity:  Medium: Programs still runs but the data and functionality are skewed.
Bug Priority:  High:  Should be easily fixable to ensure application accuracy.

-----------------------------------------------------------------------------------------------------------------------------

Bug Report 2
Bug ID: isValid()-002

Bug Symptom and Cause:  
	When start hour is set to 24, the appointment is considered valid by isValid().  This appears to be caused by the upper bounds 
	being changed from 23 to 24.  23 should be the last valid start hour. This causes hours to be outside the normal 24-hour day.
	This symptom appears to be caused by a bug in the isValid() method bounds for valid appointments.

Bug Description:  
	To make the occur, I made a new appointment object with a start hour of 24.  When the method isValid() checks the validity of
	the appointment with an assertFalse() assertion, it fails because isValid() returns true.
	
	Test Case that causes the error:
	@Test
	  public void test02()  throws Throwable  {
		 int startHour=24;
		 int startMinute=30;
		 int startDay=15;
		 int startMonth=01;
		 int startYear=2018;
		 String title="Birthday Party";
		 String description="This is my birthday party.";
		 //Construct a new Appointment object with the initial data	 
		 Appt appt2 = new Appt(startHour,
		          startMinute ,
		          startDay ,
		          startMonth ,
		          startYear ,
		          title,
		         description);
			
	// assertions
		 assertFalse(appt2.getValid());
		 assertEquals(24, appt2.getStartHour());
		 assertEquals(30, appt2.getStartMinute());
		 assertEquals(15, appt2.getStartDay());
		 assertEquals(01, appt2.getStartMonth());
		 assertEquals(2018, appt2.getStartYear());
		 assertEquals("Birthday Party", appt2.getTitle());
		 assertEquals("This is my birthday party.", appt2.getDescription()); 
		 
	 }
	 
Software Version:
	JDK:  jdk1.8.0_151
	Windows: Windows 10 Pro
	Maven: 4.0.0
	JUnit: 4.12
	jacoco: 0.8.0
	
Bug Severity:  Medium: Programs still runs but the data and functionality are skewed.
Bug Priority:  High:  Should be easily fixable to ensure application accuracy.

-----------------------------------------------------------------------------------------------------------------------------

Bug Report 3
Bug ID: isValid()-003

Bug Symptom and Cause:  
	When start minute is set to 00, the appointment is considered invalid by isValid().  This appears to be caused by the lower bounds 
	being changed from 00 to 01.  00 should be the first valid start minute. This causes minutes to be outside the normal 60 minute hour.
	This symptom appears to be caused by a bug in the isValid() method bounds for valid appointments.

Bug Description:  
	To make the occur, I made a new appointment object with a start minute of 00.  When the method isValid() checks the validity of
	the appointment with an assertTrue() assertion, it fails because isValid() returns false.  However, when the input value for start minute is 1,
	the appointment is valid.
	
	Test Case that causes the error:
	@Test
	  public void test01()  throws Throwable  {
		 int startHour=21;
		 int startMinute=00;
		 int startDay=15;
		 int startMonth=01;
		 int startYear=2018;
		 String title="Birthday Party";
		 String description="This is my birthday party.";
		 //Construct a new Appointment object with the initial data	 
		 Appt appt = new Appt(startHour,
		          startMinute ,
		          startDay ,
		          startMonth ,
		          startYear ,
		          title,
		         description);
	// assertions
		 assertTrue(appt.getValid());
		 assertEquals(21, appt.getStartHour());
		 assertEquals(30, appt.getStartMinute());
		 assertEquals(15, appt.getStartDay());
		 assertEquals(01, appt.getStartMonth());
		 assertEquals(2018, appt.getStartYear());
		 assertEquals("Birthday Party", appt.getTitle());
		 assertEquals("This is my birthday party.", appt.getDescription());         		
	 }
	 
Software Version:
	JDK:  jdk1.8.0_151
	Windows: Windows 10 Pro
	Maven: 4.0.0
	JUnit: 4.12
	jacoco: 0.8.0
	
Bug Severity:  Medium: Programs still runs but the data and functionality are skewed.
Bug Priority:  High:  Should be easily fixable to ensure application accuracy.

-----------------------------------------------------------------------------------------------------------------------------

Bug Report 4
Bug ID: isValid()-004

Bug Symptom and Cause:  
	When start minute is set to 60, the appointment is considered valid by isValid().  This appears to be caused by the upper bounds 
	being changed from 59 to 60.  59 should be the last valid start minute. This causes minutes to be outside the normal 60 minute hour.
	This symptom appears to be caused by a bug in the isValid() method bounds for valid appointments.

Bug Description:  
	To make the occur, I made a new appointment object with a start minute of 60.  When the method isValid() checks the validity of
	the appointment with an assertFalse() assertion, it fails because isValid() returns True.  However, when the input value for start minute is 61,
	the appointment is invalid.
	
	Test Case that causes the error:
	@Test
	  public void test05()  throws Throwable  {
		 int startHour=21;
		 int startMinute=60;
		 int startDay=15;
		 int startMonth=01;
		 int startYear=2018;
		 String title="Birthday Party";
		 String description="This is my birthday party.";
		 //Construct a new Appointment object with the initial data	 
		 Appt appt5 = new Appt(startHour,
		          startMinute ,
		          startDay ,
		          startMonth ,
		          startYear ,
		          title,
		         description);
			
	// assertions
		 assertFalse(appt5.getValid());
		 assertEquals(21, appt5.getStartHour());
		 assertEquals(60, appt5.getStartMinute());
		 assertEquals(15, appt5.getStartDay());
		 assertEquals(01, appt5.getStartMonth());
		 assertEquals(2018, appt5.getStartYear());
		 assertEquals("Birthday Party", appt5.getTitle());
		 assertEquals("This is my birthday party.", appt5.getDescription()); 
		 assertFalse(appt5.isRecurring());
		 
	 }
	 
Software Version:
	JDK:  jdk1.8.0_151
	Windows: Windows 10 Pro
	Maven: 4.0.0
	JUnit: 4.12
	jacoco: 0.8.0
	
Severity:  Medium: Programs still runs but the data and functionality are skewed.
Bug Priority:  High:  Should be easily fixable to ensure application accuracy.

-----------------------------------------------------------------------------------------------------------------------------

Bug Report 5
Bug ID: setTitle()-001

Bug Symptom and Cause:  
	When an appointment object is created with a title, the method setTitle() is called by the constructor.  The method is supposed to set the title
	that was input.  Instead, an empty array is input into the string.  The cause appears to be caused by a bug in the setTitle() method.

Bug Description:  
	To make the occur, I made a new appointment object with a string of "Birthday Party".  When the title string is tested, it is not present.  An empty array
	is what is encountered by the assert.  The assertion that title equals "Birthday Party" fails.
	
	Test Case that causes the error:
	@Test
	  public void test01()  throws Throwable  {
		 int startHour=21;
		 int startMinute=00;
		 int startDay=15;
		 int startMonth=01;
		 int startYear=2018;
		 String title="Birthday Party";
		 String description="This is my birthday party.";
		 //Construct a new Appointment object with the initial data	 
		 Appt appt = new Appt(startHour,
		          startMinute ,
		          startDay ,
		          startMonth ,
		          startYear ,
		          title,
		         description);
	// assertions
		 assertTrue(appt.getValid());
		 assertEquals(21, appt.getStartHour());
		 assertEquals(30, appt.getStartMinute());
		 assertEquals(15, appt.getStartDay());
		 assertEquals(01, appt.getStartMonth());
		 assertEquals(2018, appt.getStartYear());
		 assertEquals("Birthday Party", appt.getTitle());
		 assertEquals("This is my birthday party.", appt.getDescription());         		
	 }
	 
Software Version:
	JDK:  jdk1.8.0_151
	Windows: Windows 10 Pro
	Maven: 4.0.0
	JUnit: 4.12
	jacoco: 0.8.0
	
Bug Severity:  Low:  The title is only missing and the program still runs.
Bug Priority:  Medium:  Having a title is not essential, get to it when able

-----------------------------------------------------------------------------------------------------------------------------

Bug Report 6
Bug ID: setTitle()-002

Bug Symptom and Cause:  
	When an appointment object is created with a title, and the constructor is run.  Then, a string that equals null is used with setTitle(), the title now
	equals null when it should be empty ("").  The cause appears to be in the setTitle() method.

Bug Description:  
	To make the occur, I made a new appointment object with a string of "Birthday Party".  Then a string that is equal to null is input into title using the
	setString() method.  When the title is asserted to equal an empty string of "", the actual value is null and the assertion fails.
	
	Test Case that causes the error:
	@Test
	  public void test06()  throws Throwable  {
		 int startHour=21;
		 int startMinute=30;
		 int startDay=15;
		 int startMonth=01;
		 int startYear=2018;
		 String title="Birthday Party";
		 String description="This is my birthday party.";
		 //Construct a new Appointment object with the initial data	 
		 Appt appt6 = new Appt(startHour,
		          startMinute ,
		          startDay ,
		          startMonth ,
		          startYear ,
		          title,
		         description);
		String tmp=null;
		String tmp2=null;
		appt6.setStartHour(20);
		appt6.setStartMinute(29);
		appt6.setStartDay(12);
		appt6.setStartMonth(02);
		appt6.setStartYear(2017);
		appt6.setTitle(tmp);
		appt6.setDescription(tmp2);
		appt6.setRecurrence(null, 2, 3, 5);
		int recurnum = appt6.getRecurNumber();
		int recurby = appt6.getRecurBy();
		int[] recurDays = appt6.getRecurDays();
		String toStringTest = appt6.toString();
		
	// assertions
		 assertTrue(appt6.getValid());
		 assertEquals(20, appt6.getStartHour());
		 assertEquals(29, appt6.getStartMinute());
		 assertEquals(12, appt6.getStartDay());
		 assertEquals(02, appt6.getStartMonth());
		 assertEquals(2017, appt6.getStartYear());
		 assertEquals("", appt6.getTitle());
		 assertEquals("", appt6.getDescription()); 
		 assertEquals(5, recurnum);
		 assertEquals(2, recurby);
		 assertTrue(appt6.isRecurring());
		 assertEquals(3, appt6.getRecurIncrement());		 
	}
	 
Software Version:
	JDK:  jdk1.8.0_151
	Windows: Windows 10 Pro
	Maven: 4.0.0
	JUnit: 4.12
	jacoco: 0.8.0
	
Bug Severity:  Low:  The title is only missing and the program still runs.
Bug Priority:  Medium:  Having a title is not essential, get to it when able

-----------------------------------------------------------------------------------------------------------------------------

Bug Report 7
Bug ID: getApptRange()-001

Bug Symptom and Cause:  
	When getApptRange() is called after a Appt linked list object is created and populated and the first day is before the last day, an exception is thrown.
	This should not happen as the objects and parameters were valid and the days were correct.  This points to a problem with getApptRange() where it checks
	that the day parameters are correct.

Bug Description:  
	To make the occur, I made a new linked list Appt object with two appointment objects.  Then I created two Gregorian calendar days. The first day 
	was before the last day.  The exception is thrown and the program exits.
	
	Test Case that causes the error:
	@Test
	  public void test05()  throws Throwable  {
		 TimeTable table = new TimeTable();
		LinkedList<CalDay> cals = new LinkedList<CalDay>();
		LinkedList<Appt> listapp = new LinkedList<Appt>();
		 int startHour=21;
		 int startMinute=30;
		 int startDay=15;
		 int startMonth=01;
		 int startYear=2018;
		 String title="Birthday Party";
		 String description="This is my birthday party.";
		 Appt appt1 = new Appt(startHour,
		          startMinute ,
		          startDay ,
		          startMonth ,
		          startYear ,
		          title,
		         description);
		listapp.add(appt1);
		startHour=22;
		startMinute=33;
		startDay=14;
		startMonth=01;
		startYear=2018;
		 		 appt1 = new Appt(startHour,
		          startMinute ,
		          startDay ,
		          startMonth ,
		          startYear ,
		          title,
		         description);
		listapp.add(appt1);
		GregorianCalendar today = new GregorianCalendar(2018,13,01);
		GregorianCalendar next = new GregorianCalendar(2018,17,01);
		cals = table.getApptRange(listapp, today, next);
		int[] pv={1,0};
		LinkedList<Appt> permuted = table.permute(listapp, pv);
		
		assertEquals(2,listapp.size());
		assertEquals(2, pv.length);
	 }
	 
Software Version:
	JDK:  jdk1.8.0_151
	Windows: Windows 10 Pro
	Maven: 4.0.0
	JUnit: 4.12
	jacoco: 0.8.0
	
Bug Severity:  High:  The exception is thrown and the program quits.
Bug Priority:  High:  Program ceases to function normally and crashes.  Must be changed soon, and it should be easy to fix.